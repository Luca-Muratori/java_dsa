TREE
nonlinear data structure with hierarchial relationship between its elements
without having any cicle

Propierties
-represent hierarchial data
-each node have two components:
    data and link to its subcategory
-base category and sub categories under it

Why we need it?
-quicker and esier access to the data
-store hierarchial data, like folder structure

Tree terminology
-root: node that doesn't have a parent (n1)
-edge: link between parent and child (n1---edge--->n2)
-leaf:node that doesn't have any children
-sibling:childrens of the same parents
-ancestor:parent, greatparent or great-greatparent ecc. of a node
-depth of node: lenght of the path from root to a given node
-height of node: lenght of the past from the node to the deepest node
-depth of tree: depth of root node
-height of tree: height of root node

BINARY TREE
data structure where a node have at most 2 children( left and right)
prerequisite for more advanced models
we can solve: huffman coding problem, heap priority problem and others

TYpes of binary tree
-full binary tree
-perfect binary tree (each node, except for leaf, have 2 children)
-complete binary tree
-balanced binary tree


create a binary tree
can be created in 2 ways:
-linked list                                             -Array
each node will have 3 components:         | to calculate at which index we need to put the element
     (left-pointer) data (right-pointer)  | we use a math formula:
                                          |x=index in the array of the parent element
                                          |left child =cell(2x)-->x=1-->left children[i=2]
                                          |right child = cell(2x+1)-->x=1-->right child[i=3]


comparison between ll and arr for binary Tree

                    Array                               Linked list
                    tc------sc                          tc-------------sc

create               1        n                            1             1
insert a node        1        1                          n               n
delete a node        n        1                          n               n
search               n        1                          n               n
traverse             n        1 / n                      n               n
delete               1        1                          1               1
                                          

                                        










